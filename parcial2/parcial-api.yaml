openapi: 3.0.0
info:
  title: Exam 2 API
  version: 1.0.0
  description: A simple API using Faker for use in the second exam of DAW 

paths:
  /users:
    get:
      summary: List all users
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                minItems: 10
                maxItems: 40
    post:
      requestBody:
        required: true
        description: User to add 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        '422':
          description: Body error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: 
                - code: 422
                - message: Error in body
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      summary: Get a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: 
                - code: 404
                - message: Food not found
    put:
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: User to add 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User edited
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: 
                - code: 404
                - message: User not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /foods:
    get:
      summary: List all foods
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'
                minItems: 10
                maxItems: 30
    post:
      summary: Create a new food
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
  /foods/{foodId}:
    get:
      summary: Get a Food
      parameters:
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '404':
          description: Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update food
      parameters:
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '404':
          description: Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a food
      parameters:
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful response
        '404':
          description: Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      required:
        - firstName
        - lastName
      properties:
        id:
          type: integer
          format: int64
          min: 1
          x-faker: random.numeric
        firstName:
          type: string
          x-faker: name.firstName
        lastName:
          type: string
          x-faker: name.lastName
        jobTitle:
          type: string
          x-faker: name.jobArea
        email:
          type: string
          pattern: ^[\w-\.]+@([a-z]{3,10})\.(?:com|co|com\.co)$
        phone:
          type: string
          pattern: ^31\d{8}$
        photo:
          type: string
          format: url
          pattern: ^http://loremflickr\.com/640/480/people\?\d{5}
      additionalProperties: false
    Food:
      type: object
      properties:
        id:
          type: integer
          format: int64
          min: 1
          x-faker: random.numeric
        name:
          type: string
          x-faker: random.words
        description:
          type: string
        image: 
          type: string
          format: url
          pattern: ^http://loremflickr\.com/640/480/food\?\d{5}
        ingredients:
          type: array
          items:
            type: string
            x-faker: random.words
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
